plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
}

version = "${project.minecraftVersion}-${project.modVersion}"
group = "com.teamabnormals"

base {
    archivesName = project.modId
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty "blueprint.indev", "true"
    }

    client {
        modSources {
            add project.sourceSets.main
            add project.sourceSets.test
        }
    }

    server {
        modSources {
            add project.sourceSets.main
            add project.sourceSets.test
        }
    }

    data {
        modSources {
            add project.sourceSets.main
            add project.sourceSets.test
        }
        programArguments.addAll '--mod', project.modId, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

sourceSets.test.resources {
    srcDir "src/generated_test/resources"
}

dependencies {
    implementation "net.neoforged:neoforge:${project.neoforge}"
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.modName,
                "Specification-Vendor"    : "Team Abnormals",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : project.modVersion,
                "Implementation-Vendor"   : "Team Abnormals",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task sourcesJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("sources")
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        if (project.hasProperty("jacksonMavenUser") && project.hasProperty("jacksonMavenPass")) {
            maven {
                url "https://maven.jaackson.me"
                credentials {
                    username = project.properties.jacksonMavenUser
                    password = project.properties.jacksonMavenPass
                }
            }
        }
    }
}